datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  adminNotes     String    @default("")
  email          String    @unique
  emailBackup    String    @default("")
  emailStripe    String    @default("")
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  name           String    @default("")
  nameFirst      String    @default("")
  nameLast       String    @default("")

  hasInPersonEventInterest  Boolean @default(false)
  hasLiveStreamInterest     Boolean @default(false)
  hasOnlineEventInterest    Boolean @default(false)
  hasOpenToWork             Boolean @default(false)
  hasOpenToRelocation       Boolean @default(false)
  hasPublicProfileEnabled   Boolean @default(false)
  hasShoutOutsEnabled       Boolean @default(false)
  hasSmallGroupInterest     Boolean @default(false)
  hasDeepJournalingInterest Boolean @default(false)

  // Enhanced journal reminder fields
  journalReminderEnabled      Boolean           @default(false)
  journalReminderFrequency    ReminderFrequency @default(WEEKLY)
  journalReminderLastReminded DateTime?
  journalNotificationPreference Json? // Stores notification preferences

  profileBlurb                String?
  profileContactEmail         String?
  profileCurrentJobCompany    String   @default("")
  profileCurrentJobTitle      String   @default("")
  profileDiscordHandle        String?
  profileGitHubUri            String?
  profileHomepageUri          String?
  profileLinkedInUri          String?
  profileTopNetworkingReasons String[]
  profileTopServices          String[]
  profileTopSkills            String[]
  profileYearsOfExperience    Int?
  profileHighestDegree        String?
  profilePicture              String   @default("")
  residenceCountry            String   @default("")
  residenceUSState            String   @default("")

  accounts            Account[]
  authoredVotables    Votable[]                       @relation("AuthoredVotables")
  jobSearches         JobSearch[]
  quizResults         QuizResult[]
  role                RoleEnum                        @default(USER)
  sessions            Session[]
  subscriptions       Subscription[]
  tokens              Token[]
  transactions        Transaction[]
  userChecklists      UserChecklist[]
  uuid                String                          @default(uuid())
  userChecklistItems  UserChecklistItem[]
  votes               Vote[]
  Lead                Lead[]
  journalEntries      JournalEntry[]
  practiceCompletions UserJournalPracticeCompletion[]
  notificationLogs    JournalNotificationLog[]
}

enum RoleEnum {
  ADMIN
  USER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  sessionToken String?  @unique @default(uuid())
  expires      DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserChecklist {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  checklistId        Int
  isComplete         Boolean             @default(false)
  user               User                @relation(fields: [userId], references: [id])
  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  userChecklistItems UserChecklistItem[]

  @@unique([userId, checklistId])
}

model UserChecklistItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isComplete Boolean @default(false)

  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id])
  checklistItemId Int
  userChecklist   UserChecklist @relation(fields: [userChecklistId], references: [id])
  userChecklistId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int

  @@unique([userChecklistId, checklistItemId])
}

model ChecklistItem {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayIndex Int
  displayText  String
  detailText   String   @default("")
  isRequired   Boolean  @default(true)
  linkText     String   @default("")
  linkUri      String   @default("")
  tags         String[]

  version String @default("2023-07-18T00:00:00.517Z")

  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  checklistId        Int
  userChecklistItems UserChecklistItem[]

  @@unique([displayText, checklistId])
}

model Checklist {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  version        String
  checklistItems ChecklistItem[]
  userChecklists UserChecklist[]
}

model Subscription {
  id                   Int             @id @default(autoincrement())
  userId               Int
  user                 User            @relation(fields: [userId], references: [id])
  tier                 PaymentTierEnum @default(FREE)
  type                 String          @default("ACCOUNT_PLAN")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  stripeCustomerId     String?
  stripeSubscriptionId String?

  @@unique([userId, type])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  stripePaymentId String
  description     String
  amount          Float
  createdAt       DateTime @default(now())
}

enum PaymentTierEnum {
  FREE
  PAY_WHAT_YOU_CAN
  PREMIUM
}

model FlashCard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question      String
  correctAnswer String
  distractors   String[]
  explanation   String?

  flashCardDeck   FlashCardDeck? @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId Int?
}

model Quiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String  @unique
  description String?
  timeLimit   Int?

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  flashCardDeck   FlashCardDeck @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId Int

  quizResults QuizResult[]
}

model FlashCardDeck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  flashCards FlashCard[]
  quizzes    Quiz[]

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug        String @unique
  title       String
  description String

  contentItems    CourseContent[]
  flashCardDecks FlashCardDeck[]
  quizzes        Quiz[]
}

model CourseContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  contentUrl  String?
  contentType ContentType @default(TEXT)
  order       Int         @default(0)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  DOCUMENT
  LINK
  EXERCISE
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  passed Boolean
  score  Float

  quiz   Quiz @relation(fields: [quizId], references: [id])
  quizId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@index([userId, quizId, createdAt])
}

enum VotableType {
  ANSWER
  CERTIFICATION
  COMMENT
  COMPANY
  CONTENT
  EDUCATOR
  FOOD
  JOB_TITLE
  QUESTION
  SKILL
  SCHOOL
  TECH_INFLUENCER
}

model Votable {
  id                  Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  type                VotableType
  name                String
  body                String?
  tags                String[]
  prestigeScore       Float       @default(0)
  voteCount           Int         @default(0)
  registeredUserVotes Int         @default(0)
  guestVotes          Int         @default(0)
  website             String?
  miscInfo            Json?
  author              User?       @relation("AuthoredVotables", fields: [authorId], references: [id])
  authorId            Int?

  parentVotable   Votable?  @relation("VotableHierarchy", fields: [parentVotableId], references: [id])
  parentVotableId Int?
  childVotables   Votable[] @relation("VotableHierarchy")

  votes      Vote[]
  snapshots  VotableSnapshot[]
  isAccepted Boolean           @default(false)

  @@unique([type, name])
}

model VotableSnapshot {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  votableId     Int
  prestigeScore Float
  voteCount     Int
  votable       Votable  @relation(fields: [votableId], references: [id])
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votable   Votable  @relation(fields: [votableId], references: [id])
  votableId Int
  voter     User     @relation(fields: [voterId], references: [id])
  voterId   Int
  voteType  VoteType

  @@unique([voterId, votableId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Lead {
  id                          Int      @id @default(autoincrement())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  email                       String   @unique
  userId                      Int?
  isRecruiter                 Boolean  @default(false)
  hasOptOutMarketing          Boolean  @default(false)
  hasOptOutFeatureUpdates     Boolean  @default(false)
  hasOptOutEventAnnouncements Boolean  @default(false)
  hasOptOutNewsletterAndBlog  Boolean  @default(false)
  user                        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum JobApplicationStatus {
  IN_OUTREACH
  APPLIED
  IN_INTERVIEW
  REJECTED
  OFFER_RECEIVED
  TIMED_OUT
  WITHDRAWN
}

model JobSearch {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  startDate DateTime  @default(now())
  endDate   DateTime?
  isActive  Boolean   @default(true)
  notes     String?

  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  jobPosts JobPostForCandidate[]
}

model JobPostForCandidate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company               String
  jobTitle              String?
  jobPostUrl            String?
  jobBoardOrChannelName String?

  resumeVersion          String?
  initialOutreachDate    DateTime?
  initialApplicationDate DateTime?
  lastActionDate         DateTime?
  status                 JobApplicationStatus

  contactName String?
  contactUrl  String?
  hasReferral Boolean

  isInboundOpportunity Boolean

  baseSalary        Int?
  totalCompensation Int?

  notes String?

  jobSearch      JobSearch       @relation(fields: [jobSearchId], references: [id], onDelete: Cascade)
  jobSearchId    Int
  jobSearchSteps JobSearchStep[]
}

enum JobSearchStepKind {
  BACKGROUND_OR_REFERENCE_CHECK
  BEHAVIORAL_INTERVIEW
  HIRING_MANAGER_CALL
  INITIAL_APPLICATION
  MULTI_ROUND_MULTI_KIND
  NONTECHNICAL_CONVERSATION
  OTHER
  OUTBOUND_MESSAGE
  PHONE_SCREEN
  SYSTEM_DESIGN
  TAKE_HOME_ASSIGNMENT
  TECHNICAL_CODE_SCREEN_AUTOMATED
  TECHNICAL_CODE_SCREEN_MANUAL
  TECHNICAL_CONVERSATION
  TECHNICAL_OTHER
}

model JobSearchStep {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date       DateTime
  kind       JobSearchStepKind
  notes      String?
  isPassed   Boolean?
  isInPerson Boolean

  jobPost   JobPostForCandidate @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  jobPostId Int
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content         String           @db.VarChar(500)
  entryType       JournalEntryType
  isCareerRelated Boolean          @default(true)
  isMarkdown      Boolean          @default(false)
  isHighlighted   Boolean          @default(false)
  happiness       Int?
  tags            String[]         @default([])

  mintedFromDateRange DateTime[] @default([])
  mintedFromHashtag   String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@index([userId, createdAt])
}

enum JournalEntryType {
  LEARNING
  MINTED
  OTHER
  PAIN_POINT
  WIN
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

model JournalPractice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  category    PracticeCategory

  completions UserJournalPracticeCompletion[]
}

enum PracticeCategory {
  COMMUNICATION
  LEADERSHIP
  OWNERSHIP
  TECHNICAL
  PERSUASION
  PERSONAL
}

model UserJournalPracticeCompletion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  practice   JournalPractice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId Int
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@unique([practiceId, userId, createdAt])
}

model JournalNotificationLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  
  frequency ReminderFrequency
  entries   Json     // Stores IDs of entries included in this notification
  sentAt    DateTime @default(now())
  status    String   @default("SENT") // "SENT", "FAILED", "OPENED"
  
  @@index([userId, sentAt])
}